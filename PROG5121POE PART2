(Mainn.java)

public class Mainn {
    public static void main(String[] args) {
        MessageManager manager = new MessageManager();
        manager.start();
    }
}


(MessageManager.java)

import javax.swing.*;
import java.io.*;
import java.util.*;
import org.json.*;

public class MessageManager {
    private ArrayList<Message> messages = new ArrayList<>();

    public void start() {
        if (!login()) return;

        JOptionPane.showMessageDialog(null, "Welcome to QuickChat.");

        int numMessages = Integer.parseInt(JOptionPane.showInputDialog("Enter number of messages you want to send:"));

        for (int i = 0; i < numMessages; i++) {
            String recipient = JOptionPane.showInputDialog("Enter recipient cell number (+27...):");
            String text = JOptionPane.showInputDialog("Enter message (max 250 characters):");

            if (text.length() > 250) {
                JOptionPane.showMessageDialog(null, "Message exceeds 250 characters by " + (text.length() - 250));
                i--; // Try again
                continue;
            }

            Message message = new Message(recipient, text);

            String[] options = {"Send Message", "Disregard Message", "Store Message"};
            int choice = JOptionPane.showOptionDialog(null, "Choose an option", "Send Options",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

            switch (choice) {
                case 0:
                    message.setSendOption("Send Message");
                    JOptionPane.showMessageDialog(null, "Message successfully sent.");
                    break;
                case 1:
                    message.setSendOption("Disregard Message");
                    JOptionPane.showMessageDialog(null, "Press 0 to delete message.");
                    continue;
                case 2:
                    message.setSendOption("Store Message");
                    JOptionPane.showMessageDialog(null, "Message successfully stored.");
                    break;
            }

            messages.add(message);
            showMessageDetails(message);
        }

        saveMessagesToJSON();
        JOptionPane.showMessageDialog(null, "Total messages sent/stored: " + Message.returnTotalMessages());
    }

    private void showMessageDetails(Message message) {
        String msgInfo = "MessageID: " + message.getMessageID()
                + "\nMessage Hash: " + message.getMessageHash()
                + "\nRecipient: " + message.getRecipient()
                + "\nMessage: " + message.getMessageText();
        JOptionPane.showMessageDialog(null, msgInfo);
    }

    private boolean login() {
        String username = JOptionPane.showInputDialog("Enter your username:");
        String password = JOptionPane.showInputDialog("Enter your password:");

        // These must match the Part 1 saved values; use temporary example:
        if (username.equals("user_1") && password.equals("Pass@123")) {
            JOptionPane.showMessageDialog(null, "Welcome John, Doe. It is great to see you again.");
            return true;
        } else {
            JOptionPane.showMessageDialog(null, "Username or password incorrect, please try again.");
            return false;
        }
    }

    private void saveMessagesToJSON() {
        JSONArray jsonArray = new JSONArray();
        for (Message msg : messages) {
            jsonArray.put(new JSONObject(msg.toJSONString()));
        }

        try (FileWriter file = new FileWriter("messages.json")) {
            file.write(jsonArray.toString(4));
            file.flush();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error saving messages: " + e.getMessage());
        }
    }
}


(Message.java)

import java.util.Random;

public class Message {
    private String messageID;
    private static int messageCount = 0;
    private String recipient;
    private String messageText;
    private String messageHash;
    private String sendOption;

    public Message(String recipient, String messageText) {
        this.messageID = generateMessageID();
        this.recipient = recipient;
        this.messageText = messageText;
        this.messageHash = createMessageHash();
        messageCount++;
    }

    private String generateMessageID() {
        Random rand = new Random();
        int id = 1000000000 + rand.nextInt(900000000);
        return String.valueOf(id);
    }

    public boolean checkMessageID() {
        return messageID.length() <= 10;
    }

    public boolean checkRecipientCell() {
        return recipient.startsWith("+") && recipient.length() <= 13;
    }

    public String createMessageHash() {
        String[] words = messageText.split(" ");
        String firstWord = words.length > 0 ? words[0] : "";
        String lastWord = words.length > 1 ? words[words.length - 1] : firstWord;
        return messageID.substring(0, 2) + ":" + messageCount + ":" + (firstWord + lastWord).toUpperCase();
    }

    public void setSendOption(String option) {
        this.sendOption = option;
    }

    public String getSendOption() {
        return sendOption;
    }

    public String getMessageID() {
        return messageID;
    }

    public String getRecipient() {
        return recipient;
    }

    public String getMessageText() {
        return messageText;
    }

    public String getMessageHash() {
        return messageHash;
    }

    public static int returnTotalMessages() {
        return messageCount;
    }

    public String toJSONString() {
        return "{"
                + "\"messageID\":\"" + messageID + "\","
                + "\"recipient\":\"" + recipient + "\","
                + "\"messageText\":\"" + messageText + "\","
                + "\"messageHash\":\"" + messageHash + "\","
                + "\"sendOption\":\"" + sendOption + "\""
                + "}";
    }
}

